{
  
    
        "post0": {
            "title": "Is this month's key phrase "Medium-Intensity Residential"?",
            "content": "Property transactions in Charlottesville: Hot market for parcels designated as &quot;Middle Intensity&quot; in Future Land Use Plan . A response to March 2022 property transactions in Charlottesville: Hot market for parcels designated as &quot;Middle Intensity&quot; in Future Land Use Plan . I always make time to read Sean Tubbs&#39;s newsletter, and I was interested to see what he has to say about the new &quot;Medium-Intensity Residential&quot; land use designation adopted in last year&#39;s Comprehensive Plan. Sean noticed a number of properties with this designation, or located close to properties with this designation, that sold for high prices, some far above their most recent assessments. He wrote that . This month&#39;s key phrase is &quot;Medium Intensity Residential&quot;. . and noted that . ...properties with the Medium Intensity Residential designation are selling well over the 2022 assessment. . Sean writes that &quot;I intend no analysis&quot;. Fair enough, but let&#39;s do some analysis! The city provides mostly current data on assessments, property transactions, and parcel details at its Open Data Portal, which I have been mirroring to a public dataset using Google BigQuery for ease of use. Let&#39;s dig into the claims in the blog post. As I read it, there are two key arguments that we can evaluate: . Parcels with the Medium-Intensity Residential designation have been selling for over their official assessments | The difference between sale prices and assessments is greater for Medium-Intensity Residential than for other designations | . First, let&#39;s compare median sale prices, assessments, and the ratio between the two across land use designations. I&#39;m looking at all sales in 2022 to begin with. Note that I&#39;m excluding sales with a price of $0 and sales that included multiple parcels. . bq.query( &quot;&quot;&quot; select distinct percentile_cont(sales.saleamount, 0.5) over (partition by flum.desig_oct) as saleamount, percentile_cont(assessments.totalvalue, 0.5) over (partition by flum.desig_oct) as assessment, percentile_cont(sales.saleamount / assessments.totalvalue, 0.5) over (partition by flum.desig_oct) as saleassessmentratio, count(*) over (partition by flum.desig_oct) as count, flum.desig_oct as designation, from `cvilledata.cville_open_data.real_estate_sales` sales join `cvilledata.cville_open_data.real_estate_all_assessments` assessments on sales.parcelnumb = assessments.parcelnumb and assessments.taxyear = 2022 join `cvilledata.cville_plans_together.flum_202110` flum on sales.parcelnumb = flum.parcelnumb where sales.saledate &gt;= &#39;2022-01-01&#39; and sales.saleamount &gt; 0 and sales.bookpage not in ( select bookpage from `cvilledata.cville_open_data.real_estate_sales` where saledate &gt;= &#39;2022-01-01&#39; and saleamount &gt; 0 group by bookpage having count(*) &gt; 1 ) and flum.desig_oct in ( &#39;General Residential&#39;, &#39;Medium-Intensity Residential&#39;, &#39;High-Intensity Residential&#39; ) order by count desc &quot;&quot;&quot; ).result().to_dataframe() . . saleamount assessment saleassessmentratio count designation . 0 421250.0 | 341450.0 | 1.128854 | 100 | General Residential | . 1 350000.0 | 368400.0 | 1.045870 | 23 | Medium-Intensity Residential | . 2 430000.0 | 440800.0 | 0.975198 | 2 | High-Intensity Residential | . As Sean noted, Medium-Intensity Residential parcels are selling for over their assessments, with the median ratio of sale price to assessed value at 1.05, meaning that sales were typically about 5% over assessments. However, General Residential parcels had an even higher ratio of 1.13, with the median parcel selling for about 13% more than its assessed value. But Sean only considered March; let&#39;s use that same filter to make sure we&#39;re looking at the same parcels: . bq.query( &quot;&quot;&quot; select distinct percentile_cont(sales.saleamount, 0.5) over (partition by flum.desig_oct) as saleamount, percentile_cont(assessments.totalvalue, 0.5) over (partition by flum.desig_oct) as assessment, percentile_cont(sales.saleamount / assessments.totalvalue, 0.5) over (partition by flum.desig_oct) as saleassessmentratio, count(*) over (partition by flum.desig_oct) as count, flum.desig_oct as designation, from `cvilledata.cville_open_data.real_estate_sales` sales join `cvilledata.cville_open_data.real_estate_all_assessments` assessments on sales.parcelnumb = assessments.parcelnumb and assessments.taxyear = 2022 join `cvilledata.cville_plans_together.flum_202110` flum on sales.parcelnumb = flum.parcelnumb where sales.saledate &gt;= &#39;2022-03-01&#39; and sales.saledate &lt; &#39;2022-04-01&#39; and sales.saleamount &gt; 0 and sales.bookpage not in ( select bookpage from `cvilledata.cville_open_data.real_estate_sales` where saledate &gt;= &#39;2022-03-01&#39; and saledate &lt; &#39;2022-04-01&#39; and saleamount &gt; 0 group by bookpage having count(*) &gt; 1 ) and flum.desig_oct in ( &#39;General Residential&#39;, &#39;Medium-Intensity Residential&#39;, &#39;High-Intensity Residential&#39; ) order by count desc &quot;&quot;&quot; ).result().to_dataframe() . . saleamount assessment saleassessmentratio count designation . 0 508500.0 | 393700.0 | 1.168283 | 44 | General Residential | . 1 421000.0 | 396300.0 | 1.115945 | 14 | Medium-Intensity Residential | . Looking at March alone, Medium-Intensity Residential parcels had sale prices exceeding their assessments by about 12%, and General Residential parcels had prices exceeding their assessmens by about 18%. . Let&#39;s revisit the claims from above: . Parcels with the Medium-Intensity Residential designation have been selling for over their official assessments . This is consistent with the data! Medium-Intensity Residential parcels sold for about 5% more than assessments overall for 2022 and 12% in March alone. What about the next claim? . The difference between sale prices and assessments is greater for Medium-Intensity Residential than for other designations . This claim isn&#39;t supported here. While Medium-Intensity Residential parcels sold for over their assessment prices, this was also true for General Residential parcels, and it turns out that sale prices exceeeded assessments by an even higher proportion in General Residential. Sean wrote that . This month&#39;s key phrase is &quot;Medium Intensity Residential&quot;. . But maybe the unusual thing about Medium-Intensity Residential is that the recent sale prices of these parcels have been lower, relative to assessments, than the General Residential category that makes up the bulk of the city&#39;s residential land. . I&#39;ve tried to evaluate these claims in a bit more detail, but there are many limitations to this quick analysis. Maybe the Medium-Intensity Residential properties that have been sold this year are in different neighborhoods than the General Residential properties; maybe the city assesses properties differently by land use designation in a biased way. Maybe there was a pre-existing difference in land or property values across designations. Maybe correcting for these potential differences, or others that I haven&#39;t thought of, would support the claim that Medium-Intensity Residential properties are suddenly uniquely expensive. But at least so far, it appears that sale prices are higher than assessments citywide, and if anything this is more true of General Residential than Medium-Intensity Residential in recent months. . It&#39;s also worth pointing out that we don&#39;t have much data yet. The Comprehensive Plan was passed in December 2021, and only 23 parcels zoned Medium-Intensity Residential have sold in 2022. Meanwhile, the zoning rewrite is just starting:we haven&#39;t actually changed the rules yet. It&#39;s interesting to look at the early data we have, but realistically, it&#39;s going to take years to draw conclusions with any confidence. Anyway, thanks to Sean for raising some interesting questions. If you&#39;re still reading, subscribe to his substack if you haven&#39;t already. . One last point: maybe this analysis has been skewed by a small number of unusual sales. Using medians rather than means should reduce the influence of outliers. And I&#39;ve excluded sales that I don&#39;t think we should consider: specifically, properties that sold for $0 and properties that were sold as a package along with other properties. But maybe I missed something! So for completeness, here are the individual parcels that have sold in 2022, first Medium-Intensity Residential, then General Residential: . bq.query( &quot;&quot;&quot; select sales.parcelnumb as parcelnumber, sales.saleamount, sales.saledate, assessments.totalvalue, sales.saleamount / assessments.totalvalue as saleassessmentratio, sales.streetnumb, sales.streetname, sales.unit, from `cvilledata.cville_open_data.real_estate_sales` sales join `cvilledata.cville_open_data.real_estate_all_assessments` assessments on sales.parcelnumb = assessments.parcelnumb and assessments.taxyear = 2022 join `cvilledata.cville_plans_together.flum_202110` flum on sales.parcelnumb = flum.parcelnumb where sales.saledate &gt;= &#39;2022-01-01&#39; and sales.saleamount &gt; 0 and sales.bookpage not in ( select bookpage from `cvilledata.cville_open_data.real_estate_sales` where saledate &gt;= &#39;2022-01-01&#39; and saleamount &gt; 0 group by bookpage having count(*) &gt; 1 ) and flum.desig_oct = &#39;Medium-Intensity Residential&#39; order by sales.saledate desc &quot;&quot;&quot; ).result().to_dataframe() . . parcelnumber saleamount saledate totalvalue saleassessmentratio streetnumb streetname unit . 0 050013000 | 962500 | 2022-03-31 | 706300 | 1.362735 | 807 | RUGBY RD | None | . 1 070003180 | 835000 | 2022-03-31 | 681700 | 1.224879 | 111 | ALDERMAN RD | None | . 2 550049000 | 385000 | 2022-03-31 | 400900 | 0.960339 | 1338 | CHESAPEAKE ST | None | . 3 43C041000 | 312500 | 2022-03-29 | 375700 | 0.831781 | 2239 | BANBURY ST | None | . 4 21A131200 | 360700 | 2022-03-28 | 312500 | 1.154240 | 103 | LONGWOOD DR | E | . 5 440028230 | 511000 | 2022-03-24 | 328400 | 1.556029 | 1435 | WESTWOOD RD | None | . 6 41A101100 | 900000 | 2022-03-24 | 698700 | 1.288106 | 1616 | MEADOWBROOK HEIGHTS RD | None | . 7 25A175000 | 365000 | 2022-03-21 | 338700 | 1.077650 | 159 | BROOKWOOD DR | None | . 8 110076000 | 550000 | 2022-03-16 | 425900 | 1.291383 | 516 | VALLEY RD | None | . 9 600145100 | 606500 | 2022-03-15 | 579900 | 1.045870 | 1010 | ELLIOTT AVE | None | . 10 220195101 | 350000 | 2022-03-10 | 425300 | 0.822949 | 1526 | CHERRY AVE | None | . 11 540249000 | 260000 | 2022-03-04 | 275700 | 0.943054 | 213 | MEADE AVE | None | . 12 470045110 | 330000 | 2022-03-04 | 391700 | 0.842481 | 905 | MARSHALL ST | None | . 13 110061100 | 457000 | 2022-03-02 | 316500 | 1.443918 | 126 | MAYWOOD LN | None | . 14 200100100 | 345000 | 2022-02-24 | 347500 | 0.992806 | 2601 | JEFFERSON PARK AVE | None | . 15 43C026000 | 314000 | 2022-02-22 | 368400 | 0.852334 | 2238 | BANBURY ST | None | . 16 610017110 | 239000 | 2022-02-17 | 175500 | 1.361823 | 959 | RIVES ST | None | . 17 190034340 | 235000 | 2022-02-17 | 376300 | 0.624502 | 201 | OLD LYNCHBURG RD | None | . 18 270056000 | 233000 | 2022-02-14 | 285500 | 0.816112 | 405 | ELLIOTT AVE | None | . 19 540246000 | 286000 | 2022-02-08 | 293700 | 0.973783 | 305 | MEADE AVE | None | . 20 200031000 | 392000 | 2022-02-02 | 360000 | 1.088889 | 107 | HARRIS RD | None | . 21 440018100 | 300000 | 2022-01-28 | 387600 | 0.773994 | 1439 | RUGBY AVE | None | . 22 290266024 | 345000 | 2022-01-13 | 324700 | 1.062519 | 210 | BURNET ST | None | . bq.query( &quot;&quot;&quot; select sales.parcelnumb as parcelnumber, sales.saleamount, sales.saledate, assessments.totalvalue, sales.saleamount / assessments.totalvalue as saleassessmentratio, sales.streetnumb, sales.streetname, sales.unit, from `cvilledata.cville_open_data.real_estate_sales` sales join `cvilledata.cville_open_data.real_estate_all_assessments` assessments on sales.parcelnumb = assessments.parcelnumb and assessments.taxyear = 2022 join `cvilledata.cville_plans_together.flum_202110` flum on sales.parcelnumb = flum.parcelnumb where sales.saledate &gt;= &#39;2022-01-01&#39; and sales.saleamount &gt; 0 and sales.bookpage not in ( select bookpage from `cvilledata.cville_open_data.real_estate_sales` where saledate &gt;= &#39;2022-01-01&#39; and saleamount &gt; 0 group by bookpage having count(*) &gt; 1 ) and flum.desig_oct = &#39;General Residential&#39; order by sales.saledate desc &quot;&quot;&quot; ).result().to_dataframe() . . parcelnumber saleamount saledate totalvalue saleassessmentratio streetnumb streetname unit . 0 230090000 | 60000 | 2022-04-01 | 218200 | 0.274977 | 1306 | KING ST | None | . 1 380045000 | 625000 | 2022-04-01 | 504100 | 1.239833 | 1610 | BRUCE AVE | None | . 2 25A116101 | 550000 | 2022-04-01 | 471000 | 1.167728 | 948 | RAYMOND RD | None | . 3 560114200 | 622431 | 2022-04-01 | 104500 | 5.956278 | 120 | FRANKLIN ST | None | . 4 290164000 | 751100 | 2022-03-31 | 495300 | 1.516455 | 412 | 5TH ST SW | None | . 5 410043000 | 592000 | 2022-03-31 | 462400 | 1.280277 | 1427 | GENTRY LN | None | . 6 050006000 | 1300000 | 2022-03-31 | 1154100 | 1.126419 | 1816 | WINSTON RD | None | . 7 18A077B00 | 525000 | 2022-03-31 | 414600 | 1.266281 | 257 | HUNTLEY AVE | None | . 8 490054000 | 400000 | 2022-03-31 | 375000 | 1.066667 | 1217 | RIVER VISTA AVE | None | . 9 540064100 | 375000 | 2022-03-30 | 360000 | 1.041667 | 420 | 13TH ST NE | None | . 10 48A040039 | 737995 | 2022-03-30 | 160000 | 4.612469 | 1341 | PEN PARK LN | None | . 11 41A076000 | 711501 | 2022-03-30 | 549900 | 1.293873 | 1644 | ST ANNES RD | None | . 12 260072000 | 265500 | 2022-03-28 | 239900 | 1.106711 | 510 | ROUGEMONT AVE | None | . 13 48A040015 | 706807 | 2022-03-25 | 160000 | 4.417544 | 430 | LOCHLYN HILL DR | None | . 14 600088000 | 388000 | 2022-03-24 | 295100 | 1.314809 | 906 | STONEHENGE AVE | None | . 15 200136000 | 485000 | 2022-03-24 | 418200 | 1.159732 | 234 | MONTE VISTA AVE | None | . 16 610065200 | 449000 | 2022-03-23 | 300600 | 1.493679 | 904 | RIVES ST | None | . 17 600120007 | 520000 | 2022-03-23 | 429600 | 1.210428 | 1301 | CASTALIA ST EXT | None | . 18 230048000 | 270000 | 2022-03-22 | 233600 | 1.155822 | 1008 | GROVE ST | None | . 19 18A013000 | 315000 | 2022-03-22 | 342100 | 0.920783 | 227 | STRIBLING AVE | None | . 20 310035000 | 645000 | 2022-03-21 | 563600 | 1.144429 | 723 | WEST ST | None | . 21 470048800 | 750000 | 2022-03-21 | 692200 | 1.083502 | 928 | MARSHALL ST | None | . 22 48A040005 | 202860 | 2022-03-21 | 160000 | 1.267875 | 425 | LOCHLYN HILL DR | None | . 23 48A040008 | 200655 | 2022-03-21 | 160000 | 1.254094 | 407 | LOCHLYN HILL DR | None | . 24 48A040029 | 157658 | 2022-03-21 | 160000 | 0.985363 | 706 | LOCHLYN HILL DR | None | . 25 060048000 | 1055000 | 2022-03-18 | 1059500 | 0.995753 | 1844 | EDGEWOOD LN | None | . 26 18A121000 | 605000 | 2022-03-18 | 487300 | 1.241535 | 220 | HUNTLEY AVE | None | . 27 030026000 | 1150000 | 2022-03-18 | 789900 | 1.455880 | 1617 | WESTWOOD RD | None | . 28 240071000 | 305000 | 2022-03-18 | 301400 | 1.011944 | 713 | ROCK CREEK RD | None | . 29 400034000 | 1225000 | 2022-03-17 | 1051300 | 1.165224 | 2035 | HESSIAN RD | None | . 30 48A040038 | 806222 | 2022-03-17 | 160000 | 5.038888 | 1347 | PEN PARK LN | None | . 31 250013200 | 246000 | 2022-03-16 | 187500 | 1.312000 | 835 | RIDGE ST | None | . 32 550066180 | 550000 | 2022-03-11 | 476700 | 1.153765 | 102 | CHISHOLM PL | None | . 33 520016400 | 599000 | 2022-03-10 | 590700 | 1.014051 | 736 | LYONS AVE | None | . 34 240068000 | 425000 | 2022-03-10 | 356600 | 1.191812 | 707 | ROCK CREEK RD | None | . 35 200019100 | 65000 | 2022-03-09 | 150000 | 0.433333 | 0 | PORTER AVE | None | . 36 260043110 | 480000 | 2022-03-08 | 444300 | 1.080351 | 120 | ROY&#39;S PL | None | . 37 070003600 | 1295000 | 2022-03-08 | 931000 | 1.390977 | 2109 | MORRIS RD | None | . 38 610079150 | 236500 | 2022-03-08 | 243000 | 0.973251 | 812 | NASSAU ST | None | . 39 48A040034 | 739993 | 2022-03-07 | 160000 | 4.624956 | 736 | LOCHLYN HILL DR | None | . 40 510162000 | 337000 | 2022-03-04 | 321700 | 1.047560 | 1301 | POPLAR ST | None | . 41 42A087000 | 970000 | 2022-03-04 | 808200 | 1.200198 | 1625 | YORKTOWN DR | None | . 42 47A095000 | 330000 | 2022-03-02 | 293400 | 1.124744 | 1224 | AGNESE ST | None | . 43 21A023000 | 455000 | 2022-03-01 | 412400 | 1.103298 | 403 | ALLEN DR | None | . 44 190037290 | 380000 | 2022-03-01 | 347700 | 1.092896 | 417 | MOBILE LN | None | . 45 210080000 | 497000 | 2022-03-01 | 424300 | 1.171341 | 108 | RAYMOND AVE | None | . 46 480050000 | 520000 | 2022-03-01 | 428900 | 1.212404 | 1025 | ST CHARLES AVE | None | . 47 060068000 | 1375000 | 2022-03-01 | 919400 | 1.495541 | 1831 | UNIVERSITY CIR | None | . 48 43B008000 | 522600 | 2022-02-28 | 430400 | 1.214219 | 1403 | LEHIGH CIR | None | . 49 55A088618 | 468000 | 2022-02-28 | 390100 | 1.199692 | 109 | RIVERBLUFF CIR | None | . 50 22A013000 | 435000 | 2022-02-25 | 522400 | 0.832695 | 1504 | TRAILRIDGE RD | None | . 51 190075000 | 450000 | 2022-02-25 | 476400 | 0.944584 | 311 | MONTE VISTA AVE | None | . 52 590134000 | 460000 | 2022-02-24 | 261100 | 1.761777 | 705 | ROCKLAND AVE | None | . 53 470020100 | 480000 | 2022-02-22 | 486500 | 0.986639 | 505 | PARK HILL | None | . 54 570139000 | 345000 | 2022-02-18 | 221200 | 1.559675 | 304 | SPRUCE ST | None | . 55 48A004000 | 315000 | 2022-02-18 | 283400 | 1.111503 | 1209 | HOLMES AVE | None | . 56 55A124000 | 306000 | 2022-02-18 | 310900 | 0.984239 | 1703 | E MARKET ST | None | . 57 48A040051 | 134505 | 2022-02-17 | 136000 | 0.989007 | 456 | NICHOLSON ST | None | . 58 48A040052 | 134505 | 2022-02-17 | 136000 | 0.989007 | 452 | NICHOLSON ST | None | . 59 230143000 | 420000 | 2022-02-16 | 350700 | 1.197605 | 108 | NORTH BAKER ST | None | . 60 230068000 | 340000 | 2022-02-15 | 273400 | 1.243599 | 402 | JONES ST | None | . 61 300093000 | 400000 | 2022-02-15 | 290700 | 1.375989 | 856 | NALLE ST | None | . 62 410050000 | 260000 | 2022-02-15 | 340300 | 0.764032 | 1439 | GENTRY LN | None | . 63 240147000 | 185801 | 2022-02-15 | 187600 | 0.990410 | 739 | PROSPECT AVE | None | . 64 240148000 | 162000 | 2022-02-15 | 170900 | 0.947923 | 741 | PROSPECT AVE | None | . 65 220046110 | 365000 | 2022-02-14 | 344300 | 1.060122 | 113 | THOMAS DR | None | . 66 48A014000 | 345000 | 2022-02-10 | 294200 | 1.172672 | 1109 | HOLMES AVE | None | . 67 190035260 | 340000 | 2022-02-09 | 332800 | 1.021635 | 2749 | MCELROY DR | None | . 68 490099000 | 570000 | 2022-02-09 | 525700 | 1.084269 | 1304 | BELLEVIEW AVE | None | . 69 260110100 | 189000 | 2022-02-08 | 156600 | 1.206897 | 1505 | ROSA TER | None | . 70 40C018000 | 161000 | 2022-02-08 | 318400 | 0.505653 | 1915 | SWANSON DR | None | . 71 55A08811A | 260000 | 2022-02-08 | 215300 | 1.207617 | 338 | RIVERSIDE AVE | None | . 72 590379012 | 505000 | 2022-02-04 | 131900 | 3.828658 | 1624 | RIALTO ST | None | . 73 030111000 | 200000 | 2022-02-04 | 243300 | 0.822030 | 704 | 12TH ST NW | None | . 74 41A059000 | 485000 | 2022-02-04 | 514400 | 0.942846 | 1627 | ST ANNES RD | None | . 75 43C032000 | 450000 | 2022-02-03 | 453100 | 0.993158 | 2226 | BANBURY ST | None | . 76 48A040012 | 799749 | 2022-02-03 | 160000 | 4.998431 | 412 | LOCHLYN HILL DR | None | . 77 220046120 | 350000 | 2022-02-02 | 345900 | 1.011853 | 111 | THOMAS DR | None | . 78 590379011 | 535585 | 2022-02-01 | 131900 | 4.060538 | 1622 | RIALTO ST | None | . 79 500142000 | 120000 | 2022-01-31 | 110000 | 1.090909 | 516 | CAROLINE AVE | None | . 80 40C034000 | 422500 | 2022-01-28 | 465200 | 0.908212 | 2305 | SHELBY DR | None | . 81 030060800 | 633000 | 2022-01-28 | 579800 | 1.091756 | 113 | ROBINSON WOODS | None | . 82 48A040014 | 685436 | 2022-01-27 | 657600 | 1.042330 | 424 | LOCHLYN HILL DR | None | . 83 300167000 | 522000 | 2022-01-24 | 340800 | 1.531690 | 609 | 7 1/2 ST SW | None | . 84 590311000 | 250000 | 2022-01-20 | 215000 | 1.162791 | 802 | DRUID AVE | None | . 85 48A012000 | 349000 | 2022-01-19 | 292700 | 1.192347 | 708 | ELIZABETH AVE | None | . 86 47A124000 | 367500 | 2022-01-18 | 357500 | 1.027972 | 1242 | HOLMES AVE | None | . 87 490142000 | 404000 | 2022-01-14 | 350700 | 1.151982 | 1105 | LOCUST AVE | None | . 88 190034140 | 345000 | 2022-01-14 | 336100 | 1.026480 | 2722 | MCELROY DR | None | . 89 240170000 | 185000 | 2022-01-13 | 187100 | 0.988776 | 766 | ORANGEDALE AVE | None | . 90 300117100 | 305000 | 2022-01-12 | 242100 | 1.259810 | 813 | KING ST | None | . 91 220046201 | 380000 | 2022-01-12 | 335900 | 1.131289 | 117 | DAVID TER | None | . 92 390001000 | 585000 | 2022-01-11 | 578200 | 1.011761 | 2006 | MEADOWBROOK RD | None | . 93 210105230 | 370000 | 2022-01-10 | 424000 | 0.872642 | 2310 | CRESTMONT AVE | None | . 94 310261000 | 250000 | 2022-01-07 | 297800 | 0.839490 | 708 | WEST ST | None | . 95 230027000 | 200000 | 2022-01-07 | 254000 | 0.787402 | 1206 | GROVE ST | None | . 96 43A024000 | 805916 | 2022-01-06 | 810100 | 0.994835 | 1320 | KENWOOD LN | None | . 97 18A060000 | 580000 | 2022-01-05 | 529400 | 1.095580 | 219 | HUNTLEY AVE | None | . 98 210105160 | 368000 | 2022-01-05 | 399100 | 0.922075 | 2324 | CRESTMONT AVE | None | . 99 22B303000 | 205000 | 2022-01-04 | 165900 | 1.235684 | 952 | ROCK CREEK RD | None | .",
            "url": "https://jmcarp.github.io/cvilledata-blog/land-use/2022/04/10/property-transactions.html",
            "relUrl": "/land-use/2022/04/10/property-transactions.html",
            "date": " • Apr 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jmcarp.github.io/cvilledata-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jmcarp.github.io/cvilledata-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jmcarp.github.io/cvilledata-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jmcarp.github.io/cvilledata-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}